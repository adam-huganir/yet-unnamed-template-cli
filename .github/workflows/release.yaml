# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - "main"
  label:
    types: [created]


jobs:
  go-test:
    name: Go Test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.22'
      - name: run tests
        run: go test -v ./cmd/yutc

  go-build:
    name: Go Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    if: github.event_name == 'push' || github.event_name == 'label' && contains(github.event.label.name, 'release')
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: test new version
        run: |-
          ersion="$(grep -oP '\d+.\d+.\d+.*?' ./internal/version.go)"
          version="v${ersion}"
          if [[ -n "$(git tag -l "$version")" ]]; then
            echo "::error::Version $version already exists"
            exit 1
          fi
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.22'
      - name: build
        id: build
        run: |-

          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            go build -o ./dist/yutc-windows-amd64.exe ./cmd/yutc
          elif [ ${{ matrix.os }} == 'macOS-latest' ]; then
            go build -o ./dist/yutc-darwin-amd64 ./cmd/yutc
          else
            go build -o ./dist/yutc-linux-amd64 ./cmd/yutc
          fi

          binary_name="$(basename $(find ./dist -type f))"
          echo 'binary_name="$binary_name" >> $GITHUB_ENV'
      - name: release
        id: release
        run: |-
          echo "pretend to release $binary_name"
